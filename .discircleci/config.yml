version: 2.1

orbs:
  win: circleci/windows@2.2.0

commands:
  install_build_deps:
    parameters:
      sudo:
        type: boolean
        default: false
      extra:
        type: string
        default: ""
    steps:
      - run:
          name: install cmake gcc python3
          command: |
            <<#parameters.sudo >> sudo <</parameters.sudo >> apt-get update
            <<#parameters.sudo >> sudo <</parameters.sudo >> apt-get install \
            -y cmake g++ python3 python3-pip git << parameters.extra >>
      - run:
          name: install fmtlib
          command: |
            git clone https://github.com/fmtlib/fmt.git
            mkdir fmt/build
            cd fmt/build
            cmake -DFMT_TEST=OFF -DFMT_DOC=OFF ..
            make
            <<#parameters.sudo >> sudo <</parameters.sudo >> make install
      - run:
          name: install layered-file-protocol
          command: |
            git clone https://github.com/equinor/layered-file-protocols.git
            mkdir layered-file-protocols/build
            cd layered-file-protocols/build
            cmake -DBUILD_SHARED_LIBS=ON \
                  -DLFP_FMT_HEADER_ONLY=ON \
                  -DBUILD_TESTING=OFF \
                  -DCMAKE_BUILD_TYPE=Release ..
            make
            <<#parameters.sudo >> sudo <</parameters.sudo >> make install
      - run:
          name: install mpark::variant
          command: |
            git clone https://github.com/mpark/variant.git
            mkdir variant/build && cd variant/build
            cmake -DCMAKE_BUILD_TYPE=Release ..
            make
            <<#parameters.sudo >> sudo <</parameters.sudo >> make install

  python_build:
    parameters:
      docs:
        type: string
        default: ""
    steps:
      - checkout
      - install_build_deps:
          sudo: true
      - run:
          name: install core
          command: |
            mkdir build
            cd build
            cmake -DBUILD_SHARED_LIBS=ON \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DBUILD_TESTING=OFF \
                  -DBUILD_PYTHON=OFF \
                   << parameters.docs >> \
                  ..
            make
            sudo make install
            sudo ldconfig /usr/local/lib
      - run:
          name: install python dependencies
          command: python -m pip install --user -r python/requirements-dev.txt
      - run:
          name: build python
          command: |
            cd python
            python setup.py build_ext --inplace install --user test

  cmake_build:
    description: dlisio build steps
    parameters:
      type:
        description: build type
        type: enum
        default: Release
        enum: ["Release", "Debug", "RelWithDebInfo"]
      scan:
        description: scan-build or similar command prefix
        type: string
        default: ""
    steps:
      - run:
          name: install python extra
          command: python3 -m pip install --user -r python/requirements-dev.txt
      - run:
          name: configure
          command: |
            mkdir build
            cd build
            << parameters.scan >> \
            cmake -DBUILD_SHARED_LIBS=ON \
                  -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
                  -DCMAKE_BUILD_TYPE=<< parameters.type >> \
                  -DPYTHON_EXECUTABLE=`which python3` \
                  ..
      - run:
          name: build and install
          command: << parameters.scan >> cmake --build build --target install
      - run:
          name: test
          command: |
            cd build
            ctest --verbose

jobs:
  gcc:
    docker:
      - image: debian:stable
    steps:
      - checkout
      - install_build_deps
      - cmake_build

  clang:
    docker:
      - image: debian:stable
    environment:
      CC: /usr/bin/clang
      CXX: /usr/bin/clang++
    steps:
      - checkout
      - install_build_deps:
          extra: clang
      - cmake_build

  debug:
    docker:
      - image: debian:stable
    steps:
      - checkout
      - install_build_deps
      - cmake_build:
          type: Debug

  scan-build:
    docker:
      - image: debian:stable
    steps:
      - checkout
      - install_build_deps:
          extra: clang clang-tools libfindbin-libs-perl
      - cmake_build:
          scan: scan-build --status-bugs

  cppcheck:
    docker:
      - image: ubuntu:latest
    environment:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - checkout
      - install_build_deps:
          extra: cppcheck
      - run:
          name: run cppcheck
          command: |
            cmake . -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_TESTING=OFF
            cppcheck --enable=style,portability,performance,warning \
                     --library=posix \
                     --suppressions-list=cppcheck/suppressions.txt \
                     --inline-suppr \
                     --project=compile_commands.json \

  python-36:
    docker:
      - image: circleci/python:3.6
    steps:
      - python_build

  python-37:
    docker:
      - image: circleci/python:3.7
    steps:
      - python_build:
          docs: "-DBUILD_DOC=ON -DSPHINX_ARGS=-WT"

  python-38:
    docker:
      - image: circleci/python:3.8
    steps:
      - python_build:
          docs: "-DBUILD_DOC=ON -DSPHINX_ARGS=-WT"

  python-39:
    docker:
      - image: circleci/python:3.9
    steps:
      - python_build

  windows_build:
    executor:
      name: win/default
      shell: powershell.exe
    parameters:
      python:
        description: python version
        type: string
      platform:
        description: x86 or x64
        type: enum
        enum: ["x86", "x64"]
        # machine is 64-bit, but script attempts not to rely on it by default
      build_type:
        description: Release or Debug
        type: enum
        enum: ["Release", "Debug"]
        default: "Release"
    steps:
      - run:
          name: explicitly disable autocrlf
          # CircleCI doesn't disable autocrlf by default, so we need to do it ourselves
          # if not executed, our binary files will be changed and tests will fail
          command: |
            git config --global core.autocrlf false
      - checkout
      - run:
          name: set all platform-dependent environment variables
          command: |
            if('<< parameters.platform >>' -eq 'x86') {
              $install_dir = "C:/Program Files (x86)"
              $generatorplatform = 'Win32'
              $CONDA_FORCE_32BIT = 1
            } else {
              $install_dir = "C:/Program Files"
              $generatorplatform = 'x64'
              $CONDA_FORCE_32BIT = 0
            }
            [Environment]::SetEnvironmentVariable("install_dir", $install_dir,  `
                                                  [EnvironmentVariableTarget]::Machine)
            [Environment]::SetEnvironmentVariable("generatorplatform", $generatorplatform,  `
                                                  [EnvironmentVariableTarget]::Machine)
            [Environment]::SetEnvironmentVariable("CONDA_FORCE_32BIT", $CONDA_FORCE_32BIT,  `
                                                  [EnvironmentVariableTarget]::Machine)
      - restore_cache:
          key: vers6-cmake
      - run:
          name: install cmake
          command: |
            if (!(Test-Path "C:\Program Files\CMake")){
              choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System' --no-progress
            } else {
              [Environment]::SetEnvironmentVariable("Path", $env:Path + ";C:\Program Files\CMake\bin",  `
                                                    [EnvironmentVariableTarget]::Machine)
            }
            refreshenv
      - save_cache:
          key: vers6-cmake
          paths:
            - C:\Program Files\CMake
      - restore_cache:
          key: vers6-fmt-<< parameters.platform >>
      - run:
          name: install fmtlib
          command: |
            $fmtpath = $env:install_dir + "/FMT"
            if (!(Test-Path $fmtpath)) {
              git clone https://github.com/fmtlib/fmt.git
              mkdir fmt/build
              cd fmt/build
              cmake -DFMT_TEST=OFF `
                    -DFMT_DOC=OFF `
                    -DCMAKE_BUILD_TYPE=Release `
                    -A $env:generatorplatform `
                    ..
              cmake --build . --config Release --target install
            }
      - save_cache:
          key: vers6-fmt-<< parameters.platform >>
          paths:
            # 'install_dir' variable is not accessible in configuration, so need to mark both options
            # if directory doesn't exist, it simply won't be saved
            - C:/Program Files (x86)/FMT
            - C:/Program Files/FMT
      - restore_cache:
          key: vers6-variant-<< parameters.platform >>
      - run:
          name: install mpark::variant
          command: |
            $variantpath = $env:install_dir + "/Mpark.Variant"
            if (!(Test-Path $variantpath)) {
              git clone https://github.com/mpark/variant.git
              mkdir variant/build
              cd variant/build
              cmake -A $env:generatorplatform ..
              cmake --build . --target install --config Release
            }
      - save_cache:
          key: vers6-variant-<< parameters.platform >>
          paths:
            # 'install_dir' variable is not accessible in configuration, so need to mark both options
            # if directory doesn't exist, it simply won't be saved
            - C:/Program Files (x86)/MPark.Variant
            - C:/Program Files/MPark.Variant
      - run:
          name: install layered-file-protocol
          command: |
            git clone https://github.com/equinor/layered-file-protocols.git
            mkdir layered-file-protocols/build
            cd layered-file-protocols/build
            cmake -DCMAKE_CXX_FLAGS="/D_CRT_SECURE_NO_WARNINGS" `
                  -DLFP_FMT_HEADER_ONLY=ON `
                  -DBUILD_TESTING=OFF `
                  -DCMAKE_BUILD_TYPE=<< parameters.build_type >> `
                  -A $env:generatorplatform `
                  ..
            # lfp must be build with the same build config as dlisio or build will fail
            cmake --build . --config << parameters.build_type >>  --target install
      - restore_cache:
          key: vers6-miniconda-<< parameters.python >>-<< parameters.platform >>
      - run:
          name: create python version with miniconda
          command: |
            conda init powershell
            conda env list
            if (!(Test-Path "C:\tools\miniconda3\envs\py-<< parameters.python >>-<< parameters.platform >>")) {
              conda create -y -n py-<< parameters.python >>-<< parameters.platform >> python=<< parameters.python >>
            }
      - run:
          name: install python dependencies
          command: |
            conda activate py-<< parameters.python >>-<< parameters.platform >>
            python -m pip install --upgrade pip
            python -m pip install --upgrade setuptools
            python -m pip install -r python/requirements-dev.txt
      - save_cache:
          key: vers6-miniconda-<< parameters.python >>-<< parameters.platform >>
          paths:
            - C:\tools\miniconda3\envs\py-<< parameters.python >>-<< parameters.platform >>
      - run:
          name: install core
          command: |
            mkdir build
            cd build
            conda activate py-<< parameters.python >>-<< parameters.platform >>
            $pversion = (python --version | Out-String).trim()
            $pmode = (python -c "import struct;print(struct.calcsize('P') * 8)" | Out-String).trim()
            echo "active python is $pversion ; executing in $pmode -bit mode"
            # in contrast with fmt, we need to set lfp_DIR and mpark_DIR
            # fmt is found automatically because of default path (C:/Program Files/FMT/lib/cmake)
            $env:lfp_DIR = $env:install_dir + "/layered-file-protocols/share/lfp/cmake"
            $env:mpark_variant_DIR = $env:install_dir + "/Mpark.Variant/lib/cmake/mpark_variant"
            cmake -G "Visual Studio 16 2019" `
                  -DCMAKE_CXX_FLAGS="/D_CRT_SECURE_NO_WARNINGS" `
                  -DCMAKE_BUILD_TYPE=<< parameters.build_type >> `
                  -A $env:generatorplatform `
                  ..
            cmake --build . --target install --config << parameters.build_type >>
      - run:
          name: run tests
          command: |
            cd build
            conda activate py-<< parameters.python >>-<< parameters.platform >>
            ctest -C << parameters.build_type >> --verbose
      - run:
          name: build python
          command: |
            conda activate py-<< parameters.python >>-<< parameters.platform >>
            cd python
            python setup.py bdist_wheel -G "Visual Studio 16 2019" --build-type=<< parameters.build_type >>
      - run:
          name: run import test
          command: |
            conda activate py-<< parameters.python >>-<< parameters.platform >>
            python -c "import dlisio; print(dlisio.__version__)"
      - persist_to_workspace:
          root: C:/Users/circleci/project/python
          paths:
            - dist/*

  deploy:
    docker:
      - image: circleci/python:3.7
    # parameters are not used, here only to create correct build-deployment matrix
    parameters:
      python:
        description: python version
        type: string
      platform:
        description: x86 or x64
        type: enum
        enum: ["x86", "x64"]
    steps:
      - run:
          name: do not run deploy command, but report that it was called
          command: |
             echo "deployment for now is done in appveyor"
#       - run:
#           name: install twine
#           command: |
#              pip install twine
#       - attach_workspace:
#           at: deploy
#       - run:
#           name: deploy to repo
#           command: |
#             cd deploy
#             # TWINE_REPOSITORY and TWINE_USERNAME and TWINE_PASSWORD
#             # should be defined as CirceCI project environment variables
#             twine upload --skip-existing dist/*

  bigendian:
    machine:
      image: ubuntu-1604:201903-01 #is docker 18.09, so should contain buildKit
    resource_class: large
    parameters:
      setup_image_path:
        type: string
        default: ~/project/artifacts/dlisio_bigendian_setup.tar
      setup_image_name:
        type: string
        default: ci_dlisio_bigendian_setup
    steps:
      - checkout
      - run:
          name: Setup
          command: |
            mkdir -p "$(dirname << parameters.setup_image_path >>)"
            # the core functionality allowing us to build on whatever architecture
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - restore_cache:
          key: vers2-setup-image-{{ checksum "~/project/.circleci/images/setup/Dockerfile" }}
      - run:
          name: Assure setup image loaded locally
          command: |
            if [ ! -f << parameters.setup_image_path >> ]; then
               echo "Local docker setup image not found. Recreating"
               export DOCKER_BUILDKIT=1
               docker build \
                   -t << parameters.setup_image_name >> \
                   -f ~/project/.circleci/images/setup/Dockerfile \
                   --progress plain \
                   .
               docker save << parameters.setup_image_name >> > << parameters.setup_image_path >>
            else
               echo "Local docker setup image found. Loading"
               docker load -i << parameters.setup_image_path >>
            fi
      - save_cache:
          key: vers2-setup-image-{{ checksum "~/project/.circleci/images/setup/Dockerfile" }}
          paths:
            << parameters.setup_image_path >>
      - run:
          name: Build dlisio and run tests
          command: |
            export DOCKER_BUILDKIT=1
            docker build \
                -t dlisio \
                -f ~/project/.circleci/images/build/Dockerfile \
                --progress plain \
                --build-arg image=<< parameters.setup_image_name >> \
                .

workflows:
  version: 2
  build:
    jobs:
      - gcc
      - clang
      - debug

  static-analysis:
    jobs:
      - cppcheck
      - scan-build

  python:
    jobs:
      - python-36
      - python-37
      - python-38
      - python-39

  windows:
    jobs:
      - windows_build:
          name: build-python-<< matrix.python >>-win-<< matrix.platform >>
          matrix:
            parameters:
              python: ["3.6", "3.7", "3.8", "3.9"]
              platform: ["x86", "x64"]
          # filters on the "build" jobs are not accidental, CircleCI needs them
          filters:
            tags:
              only: /.*/
      - deploy:
          name: deploy-python-<< matrix.python >>-win-<< matrix.platform >>
          matrix:
            parameters:
              python: ["3.6", "3.7", "3.8", "3.9"]
              platform: ["x86", "x64"]
          requires:
            - build-python-<< matrix.python >>-win-<< matrix.platform >>
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - windows_build:
          name: debug-build-python-<< matrix.python >>-win-<< matrix.platform >>
          matrix:
            parameters:
              python: ["3.8"]
              platform: ["x86", "x64"]
              build_type: ["Debug"]
  arch:
    jobs:
      - bigendian
